/*
 * Notes API
 * API for managing notes in a Spring service, with pagination and sorting for listing notes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.NoteCreateRequest;
import org.openapitools.client.model.NotePage;
import org.openapitools.client.model.NoteUpdateRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notesGet
     * @param authorization  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sort  (optional, default to createdAt)
     * @param direction  (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated and sorted list of notes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesGetCall(String authorization, Integer page, Integer size, String sort, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notesGetValidateBeforeCall(String authorization, Integer page, Integer size, String sort, String direction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling notesGet(Async)");
        }
        

        okhttp3.Call localVarCall = notesGetCall(authorization, page, size, sort, direction, _callback);
        return localVarCall;

    }

    /**
     * Get all notes
     * Retrieves a paginated list of notes with optional sorting.
     * @param authorization  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sort  (optional, default to createdAt)
     * @param direction  (optional, default to asc)
     * @return NotePage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated and sorted list of notes. </td><td>  -  </td></tr>
     </table>
     */
    public NotePage notesGet(String authorization, Integer page, Integer size, String sort, String direction) throws ApiException {
        ApiResponse<NotePage> localVarResp = notesGetWithHttpInfo(authorization, page, size, sort, direction);
        return localVarResp.getData();
    }

    /**
     * Get all notes
     * Retrieves a paginated list of notes with optional sorting.
     * @param authorization  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sort  (optional, default to createdAt)
     * @param direction  (optional, default to asc)
     * @return ApiResponse&lt;NotePage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated and sorted list of notes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotePage> notesGetWithHttpInfo(String authorization, Integer page, Integer size, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = notesGetValidateBeforeCall(authorization, page, size, sort, direction, null);
        Type localVarReturnType = new TypeToken<NotePage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all notes (asynchronously)
     * Retrieves a paginated list of notes with optional sorting.
     * @param authorization  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @param sort  (optional, default to createdAt)
     * @param direction  (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated and sorted list of notes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesGetAsync(String authorization, Integer page, Integer size, String sort, String direction, final ApiCallback<NotePage> _callback) throws ApiException {

        okhttp3.Call localVarCall = notesGetValidateBeforeCall(authorization, page, size, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<NotePage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notesIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Note deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdDeleteCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notesIdDeleteValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = notesIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a specific note
     * Deletes a note by its ID.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Note deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public void notesIdDelete(UUID id) throws ApiException {
        notesIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete a specific note
     * Deletes a note by its ID.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Note deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notesIdDeleteWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = notesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific note (asynchronously)
     * Deletes a note by its ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Note deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdDeleteAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notesIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notesIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = notesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a specific note
     * Retrieves a note by its ID.
     * @param id  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public Note notesIdGet(UUID id) throws ApiException {
        ApiResponse<Note> localVarResp = notesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a specific note
     * Retrieves a note by its ID.
     * @param id  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> notesIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = notesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific note (asynchronously)
     * Retrieves a note by its ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdGetAsync(UUID id, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = notesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notesIdPut
     * @param id  (required)
     * @param noteUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdPutCall(UUID id, NoteUpdateRequest noteUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = noteUpdateRequest;

        // create path and map variables
        String localVarPath = "/notes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notesIdPutValidateBeforeCall(UUID id, NoteUpdateRequest noteUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notesIdPut(Async)");
        }
        
        // verify the required parameter 'noteUpdateRequest' is set
        if (noteUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'noteUpdateRequest' when calling notesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = notesIdPutCall(id, noteUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a specific note
     * Updates an existing note by its ID.
     * @param id  (required)
     * @param noteUpdateRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public Note notesIdPut(UUID id, NoteUpdateRequest noteUpdateRequest) throws ApiException {
        ApiResponse<Note> localVarResp = notesIdPutWithHttpInfo(id, noteUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a specific note
     * Updates an existing note by its ID.
     * @param id  (required)
     * @param noteUpdateRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> notesIdPutWithHttpInfo(UUID id, NoteUpdateRequest noteUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = notesIdPutValidateBeforeCall(id, noteUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific note (asynchronously)
     * Updates an existing note by its ID.
     * @param id  (required)
     * @param noteUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Note not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesIdPutAsync(UUID id, NoteUpdateRequest noteUpdateRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = notesIdPutValidateBeforeCall(id, noteUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notesPost
     * @param noteCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Note created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesPostCall(NoteCreateRequest noteCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = noteCreateRequest;

        // create path and map variables
        String localVarPath = "/notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notesPostValidateBeforeCall(NoteCreateRequest noteCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'noteCreateRequest' is set
        if (noteCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'noteCreateRequest' when calling notesPost(Async)");
        }
        

        okhttp3.Call localVarCall = notesPostCall(noteCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new note
     * Creates a new note with the provided title and content.
     * @param noteCreateRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Note created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Note notesPost(NoteCreateRequest noteCreateRequest) throws ApiException {
        ApiResponse<Note> localVarResp = notesPostWithHttpInfo(noteCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new note
     * Creates a new note with the provided title and content.
     * @param noteCreateRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Note created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> notesPostWithHttpInfo(NoteCreateRequest noteCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = notesPostValidateBeforeCall(noteCreateRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new note (asynchronously)
     * Creates a new note with the provided title and content.
     * @param noteCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Note created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notesPostAsync(NoteCreateRequest noteCreateRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = notesPostValidateBeforeCall(noteCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
